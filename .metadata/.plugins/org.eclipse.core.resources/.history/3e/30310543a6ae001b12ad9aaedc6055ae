import java.net.*;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.time.*;
import java.text.*;
public class Part1TCPClient {
	public static void main (String args[]) { 
		  // args[0] = serverIP
		Socket s = null;

		try{
			int serverPort = 50000;
			s = new Socket (args[0], serverPort);
			DataInputStream in = new DataInputStream(s.getInputStream());
			DataOutputStream out = new DataOutputStream(s.getOutputStream());
			int b=0;
			while(true){
				System.out.println("----------------------------------------------------------------------");
				System.out.println("Event Management System");
				System.out.println("----------------------------------------------------------------------");
				System.out.println("1- Schedule a new event");
				System.out.println("2- Cancel an existing one");
				System.out.println("3- List all exiting events in one location");
				System.out.println("4- Check if any event is scheduled on a particular date");
				System.out.println("0- Quit");
				System.out.println("----------------------------------------------------------------------");
				System.out.println("Your choice? __");
				Scanner sc= new Scanner(System.in);  
				int choice = sc.nextInt();
				sc.close();
				out.write(choice);
				if (choice == 1) {
					System.out.println("Enter your new event ID");
					Scanner se= new Scanner(System.in);  
					int newID= se.nextInt();
					while(true) {
					    if(se.hasNextInt(newID)) {
					    	break;}
						else {
								System.out.println ("Invalid ID.");
				    	        System.out.print ("Please Input a valid ID:\n ");
				    	        newID= se.nextInt(); // get another number before checking conditions again
						}
					}se.close();
					
					System.out.println("Enter your new event Title");
					Scanner ss= new Scanner(System.in);  
					String newTitle= ss.next();
					
					System.out.println("Enter your new event Description");
					Scanner sd= new Scanner(System.in);  
					String newDesc= sd.next();
					
					System.out.println("Enter your new event Location");
					Scanner sl= new Scanner(System.in);
					String newLoc= sl.next();
					while(true) {
					    if(	newLoc.equals("AD")||newLoc.equals("AA")) {
					    	break;}
						else {
								System.out.println ("Invalid location.");
				    	        System.out.print ("Please Input a valid location:\n ");
				    	        newLoc= sl.next(); // get another number before checking conditions again
						}
					}
					System.out.println("Enter your new event Schedule (MM/DD/YYYY)");
					Scanner sscc= new Scanner(System.in);  
					String newSchedule= sscc.next();
					while(true) {
					    if(checkDate(newSchedule)) {
					    	break;}
						else {
								System.out.println ("Invalid Date.");
				    	        System.out.print ("Please Input a valid Date:\n ");
				    	        newSchedule= sscc.next(); // get another number before checking conditions again
						}
						}

					System.out.println("Enter your new event number of Attendees");
					Scanner sa= new Scanner(System.in);  
					int newAttendees= sa.nextInt();
					while(true) {
					    if(sa.hasNextInt(newAttendees)) {
					    	break;}
						else {
								System.out.println ("Invalid Input.");
				    	        System.out.print ("Please Input a valid Input:\n ");
				    	        newAttendees= sa.nextInt(); // get another number before checking conditions again
						}
					}
					
					System.out.println("Enter your new event VIP Guest");
					Scanner sv= new Scanner(System.in);  
					String newVIP= sv.next();
					
					System.out.println("Enter your new event Budget");
					Scanner sb= new Scanner(System.in);  
					int newbudget = sb.nextInt();
					while(true) {
					    if(sb.hasNextInt(newbudget)) {
					    	break;}
						else {
								System.out.println ("Invalid Input.");
				    	        System.out.print ("Please Input a valid Input:\n ");
				    	        newbudget= sb.nextInt(); // get another number before checking conditions again
						}
					}
					
					
					
					out.write(newID);
					out.writeUTF(newTitle);
					out.writeUTF(newDesc);
					out.writeUTF(newLoc);
					out.writeUTF(newSchedule);
					out.write(newAttendees);
					out.writeUTF(newVIP); 
					out.write(newbudget);
	
		 		} 
				if (choice == 2) {
		 			System.out.println("Enter the event ID you want to delete");
					int DeleteID= sc.nextInt();
					out.write(DeleteID);
		 			System.out.println("Event is deleted!");
		 			
		 		} 
		 		if (choice == 3) {
					System.out.println("What location you want to see\n (input number 1=AD,2=AA)");
					 int x= sc.nextInt();
					
					 while (x<0 || x>3) {
						    System.out.println ("Invalid location number.");
			    	        System.out.print ("Please Input a valid location number: ");
			    	        x =  sc.nextInt(); // get another number before checking conditions again		
					}

				    out.write(x);
					String allevents = in.readUTF();	
		 			System.out.println("Events in that location:\n ");
		 			System.out.println(allevents);
		 			
		 		}  
		 		if (choice == 4) {
//				    out.write(choice);
		 			System.out.println("Enter the date dd/mm/yyyy");
		 			String date= sc.next();
					out.writeUTF(date);
//					
					String alldate = in.readUTF();	
					System.out.println(alldate);
		 			}
		 		 if (choice == 0) {
		 			 System.exit(0);
		 			}
		 			}
		 
			
			
      	}catch (UnknownHostException e) {System.out.println("Error Socket:"+e.getMessage());
      	}catch (EOFException e){System.out.println("Error EOF:"+e.getMessage());
      	}catch (IOException e){System.out.println("Error readline:"+e.getMessage());
      	}finally {if(s!=null) 
			try {s.close(); 
		  	}catch (IOException e) {System.out.println ("Error close:" + e.getMessage());}
		}
	}


private static boolean checkDate(String dateStr) {

    DateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
    sdf.setLenient(false);

    try {
      sdf.parse(dateStr);

      int currentYear = Year.now().getValue();
      String str[] = dateStr.split("/");
      int year = Integer.parseInt(str[2]);

      if(year > currentYear || year < currentYear-100){
        return false; 
      }

    } catch (NumberFormatException | ParseException ex){

      return false;  // Returns false if parsing fails (in case of bad input).
    }

    return true; // Returns true for valid date Strings
 }}
                       